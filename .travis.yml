language: cpp

arch:
  - amd64
  - arm64  
  - ppc64le
  - s390x

compiler:
  - gcc
  - clang


jobs:
  include:
    - os: linux
      dist: bionic
      sudo: true
      addons:
       apt:
         packages: 
           - gcc-7
           - g++-7
           - valgrind
install:
    - if [ "$CXX" = "clang++" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX="clang++-6.0" CC="clang-6.0"; fi
    - echo ${PATH}
    - echo ${CXX}
    - ${CXX} --version
    - ${CXX} -v
    - sudo apt-get install valgrind
    - sudo apt-get install cppcheck
    - sudo apt-get install clang-format
    
    # Download and install recent Cmake
    - |
      if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
        CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2-linux-x86_64.tar.gz"
        mkdir -p ${DEPS_DIR}/cmake
        travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
        export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      fi
script:
    # Build main and tests
     - mkdir .build/
     - cd .build/
     - cmake -DCMAKE_BUILD_TYPE=PROFILE ..  
     - make
     - valgrind --tool=memcheck --leak-check=full --error-exitcode=1 ctest
     - cd ..
     - cppcheck --inconclusive --enable=all *.c *.cpp *.h 
     - clang-format -i --style=Google *.cpp *.h *.c
after_success:
# Create lcov report
- lcov --capture --directory . --output-file coverage.info
- lcov --remove coverage.info '/.build/*' --output-file coverage.info # filter system-files
- lcov --list coverage.info 
# Uploading report to CodeCov
- bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
